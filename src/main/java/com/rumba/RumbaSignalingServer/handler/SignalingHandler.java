package com.rumba.RumbaSignalingServer.handler;import org.springframework.web.socket.CloseStatus;import org.springframework.web.socket.TextMessage;import org.springframework.web.socket.WebSocketSession;import org.springframework.web.socket.handler.TextWebSocketHandler;import org.springframework.stereotype.Component;import java.util.Collections;import java.util.HashSet;import java.util.Set;@Componentpublic class SignalingHandler extends TextWebSocketHandler {    private Set<WebSocketSession> sessions = Collections.synchronizedSet(new HashSet<>());    @Override    public void afterConnectionEstablished(WebSocketSession session) throws Exception {        sessions.add(session);        System.out.println("New connection established: " + session.getId());    }    @Override    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {        System.out.println("Received message: " + message.getPayload() + " from " + session.getId());        // Reenviar el mensaje a todos los dem√°s clientes        for (WebSocketSession webSocketSession : sessions) {            if (webSocketSession.isOpen() && !webSocketSession.getId().equals(session.getId())) {                webSocketSession.sendMessage(message);            }        }    }    @Override    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {        sessions.remove(session);        System.out.println("Connection closed: " + session.getId());    }}